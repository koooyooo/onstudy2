  <question>
    <expository-writing>コメントは可読性の低いコードに対して記述されるケースが多い
からです。論理的なクラス分け、メソッド分けが為されていない
コードでは、処理が一箇所に集中し、無意味な複雑化が発生
します。こういった場合にコメントが増えるという現象が
発生します。

正しくクラス、メソッドに分割されていれば、クラス名やメソッド
名で説明出来る筈です。

此処からは個人的な意見ですが、その際クラスとメソッドに対して
コメントを記述するのは適切な事だと思います。クラスには静的な
立場が、メソッドには動的な処理が適切な粒度であるからです。

但し、残りの行コメントは余計です。これはリファクタリングを
完了した後で、まだ説明をする必要がある様なレアケースのみです。

尚、Javaコンパイラに対して大した負荷はかかりません。加えて
コメントは処理とは関係無い為、リファクタリングでは無害です。</expository-writing>
    <hint>書かれている本が「リファクタリング」という点です。</hint>
    <id>12</id>
    <options>
      <option>
        <id>1</id>
        <right-answer>false</right-answer>
        <text>コメント処理は、Javaコンパイラに対する負荷が高い</text>
      </option>
      <option>
        <id>2</id>
        <right-answer>false</right-answer>
        <text>コメントが多いコードは、リファクタリング出来ない</text>
      </option>
      <option>
        <id>3</id>
        <right-answer>true</right-answer>
        <text>コードの可読性の低さをコメントでカバーしている場合が多い</text>
      </option>
    </options>
    <sentence>Martin Fowler は、その著書『リファクタリング』の中で、コメントの
多いコードは不吉な匂いがすると述べています。一般的に考える
ならば、コメントが多いコードの方が理解し易い筈ですが、コメント
の多いコードが拙いとされる原因は何でしょうか？</sentence>
    <title>コメント</title>
  </question>
