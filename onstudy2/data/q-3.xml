  <question>
    <expository-writing>ドキュメントのサポートは重要ですが、ドキュメントとコードが
常に一致しているとは限りません。また、ドキュメントでの一覧
を見ずにサービスを探す開発者も出るでしょう。彼らの手順が悪い
と言えば其れまでですが、基盤部分の設計者は、間違いが起こり
辛く、開発者の負荷が低い仕組みを用意しなければなりません。

この場合、サービスの一覧を提供するクラスを別個用意すべきで
す。このクラスには、全てのサービスの getterを用意し、コード
上で、サービスの一覧を提供する必要があります。尚、このクラス
が Singleton形式でアクセスされるのは構いません。何故なら、
開発者が覚えるべき直接参照クラスは、既に１つに集約されている
からです。</expository-writing>
    <hint>新規にメンバーが追加された際を考えてください。</hint>
    <id>3</id>
    <options>
      <option>
        <id>1</id>
        <right-answer>false</right-answer>
        <text>ドキュメント定義で十分</text>
      </option>
      <option>
        <id>2</id>
        <right-answer>true</right-answer>
        <text>コードでの表現は重要</text>
      </option>
    </options>
    <sentence>GoFのデザインパターン「Singleton」を実装したクラスは、他の
如何なるクラスからも getInstance() によって直接参照を取得出来
るようになります。

これを利用して、全てのサービスを実装すれば、全ての箇所から
全てのサービスを利用する事ができます。

全てのサービスを [サービス.getInstance()] で取得するという設計
にしようとしたら、ある人が「この設計ではサービスが重複する
恐れがあるので良くない」と言いました。

「全てのサービスをSingletonで実装してしまうと、実装者は、
Singletonの名前を知らない限りサービスの存在に気づかない
ので、既にあるサービスに気づかず、新たに自作する可能性が
ある」というのが彼の言い分です。

サービスの一覧は、ドキュメントとして定義した方が保守性の
面から考えても良いと思うのですが、コードとして表現する必要
があるのでしょうか？

現在作成しているのがサービスを提供する基盤部分だという点に
着目して解答してください。</sentence>
    <title>Singletonの参照</title>
  </question>
